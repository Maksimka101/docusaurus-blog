<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://maksimka101.github.io/docusaurus-blog/blog</id>
    <title>Maksim Zemlyanikin Blog</title>
    <updated>2022-09-04T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://maksimka101.github.io/docusaurus-blog/blog"/>
    <subtitle>Maksim Zemlyanikin Blog</subtitle>
    <icon>https://maksimka101.github.io/docusaurus-blog/img/favicon.svg</icon>
    <entry>
        <title type="html"><![CDATA[Combine]]></title>
        <id>/combine</id>
        <link href="https://maksimka101.github.io/docusaurus-blog/blog/combine"/>
        <updated>2022-09-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Combine logo]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Combine logo" src="/docusaurus-blog/assets/images/combine_logo-ce76992f8a918aca91c2b570b2be8d4d.png" width="548" height="289" class="img_ev3q"></p><p>One of the keys to a successful application is performance. At the most time, it's fine to do everything
in the main Isolate. However, sometimes you need to do some heavy task that may take significant time - 8
or even 16 ms. In that case, you should create a new Isolate to perform a calculation in it. Dart's Isolates API
is complicated. So it would be great to use a package that simplifies it. In pub dev, we have a lot of great
packages for that and in this article I'll show one new and special -
<a href="https://pub.dev/packages/combine" target="_blank" rel="noopener noreferrer">Combine</a></p><details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>Haven't heard about isolate?</summary><div><div class="collapsibleContent_i85q"><div><p>All Dart code runs inside of isolates. Each isolate has its own memory heap, ensuring that none of the state in an isolate is accessible from any other isolate.</p>You can read about them in the <a href="https://dart.dev/guides/language/concurrency#how-isolates-work" target="_blank" rel="noopener noreferrer">Dart documentation</a>.</div></div></div></details><p>The <strong>combine</strong> package is created to make it easier to use Isolate in these scenarios:</p><ul><li>Create Isolate and communicate with it</li><li>Efficiently execute tasks in the Isolates pool</li><li>Use Method Channels in the Isolate</li><li>Laziness. Nothing will be created until it's used</li><li>The stub on the web platform</li></ul><p>Let's go through some items and compare Combine with Isolate!</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="combine-isolate">Combine Isolate<a class="hash-link" href="#combine-isolate" title="Direct link to heading">â€‹</a></h3><p>Everything you need is to call a <code>spawn</code> method and pass <code>entryPoint</code> function.</p><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> isolateInfo </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token class-name">Combine</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">context</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Argument from main isolate: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">${</span><span class="token string-literal interpolation expression">context</span><span class="token string-literal interpolation expression punctuation" style="color:#393A34">.</span><span class="token string-literal interpolation expression">argument</span><span class="token string-literal interpolation punctuation" style="color:#393A34">}</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  context</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">messenger</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">messages</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">listen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Message from main isolate: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">message</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> argument</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">42</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">isolateInfo</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">messenger</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">messages</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">listen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Message from isolate: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">message</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Hello from main isolate!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>The same using pure Isolate</summary><div><div class="collapsibleContent_i85q"><div><p>This code is two times longer and more complicated.</p><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> port </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">ReceivePort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token class-name">Isolate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">spawn</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Argument from main isolate: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">${</span><span class="token string-literal interpolation expression">args</span><span class="token string-literal interpolation expression punctuation" style="color:#393A34">[</span><span class="token string-literal interpolation expression number" style="color:#36acaa">1</span><span class="token string-literal interpolation expression punctuation" style="color:#393A34">]</span><span class="token string-literal interpolation punctuation" style="color:#393A34">}</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">SendPort</span><span class="token plain"> sendPort </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> values</span><span class="token punctuation" style="color:#393A34">[</span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> port </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">ReceivePort</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sendPort</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">port</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sendPort</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    port</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">listen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">message</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Message from main isolate: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">message</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain">port</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">sendPort</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">42</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">late </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">SendPort</span><span class="token plain"> sendPort</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">port</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">listen</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">data </span><span class="token operator" style="color:#393A34">is</span><span class="token plain"> </span><span class="token class-name">SendPort</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sendPort </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> data</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    sendPort</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">send</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Hello from main isolate!"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">else</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token function" style="color:#d73a49">print</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string-literal string" style="color:#e3116c">"Message from isolate: </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">data</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div></div></div></div></details><p>The spawn method returns <code>IsolateInfo</code> which holds:</p><ul><li><code>IsolateMessenger</code> to communicate with isolate. It has:<ul><li><code>messages</code> getter which returns a stream of messages from the isolate</li><li><code>send</code> method which sends a message to the isolate</li></ul></li><li><code>CombineIsolate</code> is a representation of isolate. It's used to kill isolate.</li></ul><p><code>entryPoint</code> function will be executed in the isolate.
It may be a static method or a top-level function as well as a class method or lambda function.
It even may use closure variables with some limitations.
See <a href="#closure-variables">the closure variables section</a> for more info.</p><p>The entry point receives <code>context</code> as an argument. Context is a holder for:</p><ul><li><code>argument</code> parameter which was passed to the <code>spawn</code> method</li><li><code>IsolateMessenger</code> </li><li><code>CombineIsolate</code>. </li></ul><details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>The <code>spawn</code> method parameters.</summary><div><div class="collapsibleContent_i85q"><div>This method takes a few parameters:<ul><li><code>entryPoint</code> which was described above.</li><li>The <code>argument</code> parameter which will be accessible with <code>context.argument</code> from the entry point function</li><li><code>errorsAreFatal</code> which specifies whether isolate should be killed on the uncaught exception.</li><li><code>debugName</code> is a name of the isolate which is visible in the editor.</li></ul></div></div></div></details><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="isolates-pool">Isolates pool<a class="hash-link" href="#isolates-pool" title="Direct link to heading">â€‹</a></h3><p>The most interesting part of this package is an Isolates pool which is named <code>CombineWorker</code>.
With it, you can schedule the tasks which will be executed in the isolates pool. </p><p>It's designed to be as safe and easy to use as possible. </p><ul><li>by default, you don't need to initialize the worker. It will be initialized while the first usage.</li><li>you can initialize the worker manually and without waiting for initialization to complete, start to schedule
the tasks. </li><li>while initialization, you can specify the number of tasks per isolate using the tasksPerIsolate parameter.
If you want to execute asynchronous tasks which work with a file, network, or just an event loop, it will be
more efficient to run 2 or more tasks in the same isolate.</li><li>you can close the worker and cancel all the tasks or let them finish before closing.</li><li>exception in the task will be sent to the main isolate and thrown in it.
For example <code>final futureResult = CombineWorker().execute(() =&gt; throw IsolateException())</code>.
In that case, <code>futureResult</code> will be completed with <code>IsolateException</code>.</li></ul><p>Small usage example from the documentation:</p><div class="language-dart codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-dart codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token class-name">CombineWorker</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">initialize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> helloWorld </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token class-name">CombineWorker</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">execute</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">zeroArgsFunction</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> maksim </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token class-name">CombineWorker</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">executeWithArg</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">oneArgFunction</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"Maksim"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> helloArshak  </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">await</span><span class="token plain"> </span><span class="token class-name">CombineWorker</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">executeWith2Args</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  twoArgsFunction</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token string-literal string" style="color:#e3116c">"Hello"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"Arshak!"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">zeroArgsFunction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"Hello, World!"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">oneArgFunction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token plain"> str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> str</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">twoArgsFunction</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token plain"> a</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> b</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">a</span><span class="token string-literal string" style="color:#e3116c">, </span><span class="token string-literal interpolation punctuation" style="color:#393A34">$</span><span class="token string-literal interpolation expression">b</span><span class="token string-literal string" style="color:#e3116c">"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>Multiple <code>CombineWorker</code> instances.</p><p>Although it is a singleton you still can create a few instances of workers
with different configurations.
Combine worker uses <code>CombineWorkerImpl</code> under the hood which is not a singleton and
nothing prevents you from using it.</p></div></div><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="method-channels">Method Channels<a class="hash-link" href="#method-channels" title="Direct link to heading">â€‹</a></h3><p>By default, you can't use Method Channels outside of the main Isolate. However, it's possible to use them in the
Combine Isolate!</p><p>It works because Combine overrides the default binary messenger and redirects messages to the main Isolate.
Sometimes it's not good for performance because this binary message will be copied twice. To send it
to the main Isolate and the platform. So I recommend you to be careful when working with Method Channels.</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="closure-variables">Closure variables<a class="hash-link" href="#closure-variables" title="Direct link to heading">â€‹</a></h3><p>Isolate <code>entryPoint</code> function for <code>spawn</code> method or <code>task</code> function for the <code>execute</code> methods
may be a first-level, as well as a static or top-level.</p><p>Also, it may use closure variables but with some restrictions:</p><ul><li>closure variable will be copied (as every variable passed to isolate)
so it won't be synchronized across Isolates.</li><li>if you use at least one variable from closure all closure variables
will be copied to the Isolate due to this <a href="https://github.com/dart-lang/sdk/issues/36983" target="_blank" rel="noopener noreferrer">issue</a>.
It can lead to high memory consumption or event exception because
some variables may contain native resources.</li></ul><p>Due to the above points, I highly recommend you avoid using closure variables
until this issue is fixed.</p><h2 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="comparison">Comparison<a class="hash-link" href="#comparison" title="Direct link to heading">â€‹</a></h2><p>Each of these plugins is great however it's impossible to be perfect. So I'll try to show the weakness
and strengths of Combine.</p><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="executor"><a href="https://pub.dev/packages/worker_manager" target="_blank" rel="noopener noreferrer">Executor</a><a class="hash-link" href="#executor" title="Direct link to heading">â€‹</a></h3><p>Executor pros:</p><ul><li>It's mature</li><li>The task can be canceled</li><li>Task and isolate pool can be paused</li><li>Doesn't depends on the flutter</li></ul><p>Combine pros:</p><ul><li>Provides API for creating and working with isolate</li><li>Allows to work with method channels</li><li>Customizable. You can specify the number of parallel tasks per isolate and worker closing strategy.</li></ul><h3 class="anchor anchorWithHideOnScrollNavbar_WYt5" id="flutter-isolate"><a href="https://pub.dev/packages/flutter_isolate" target="_blank" rel="noopener noreferrer">Flutter isolate</a><a class="hash-link" href="#flutter-isolate" title="Direct link to heading">â€‹</a></h3><p>Flutter isolate pros:</p><ul><li>It's mature too</li><li>It works with method channels in the much more efficient way</li></ul><p>Combine pros:</p><ul><li>Easier to use</li><li>It's possible to send non-primitive objects</li><li>Doesn't starts a new Flutter engine</li><li>Works on all Flutter platforms</li></ul><p>I suggest you use Flutter isolate only when your main goal is to work with method channels.</p><hr><p>Thank you for reading this article. I hope it will help you write cool and performant applicationsðŸ”¥</p>]]></content>
        <category label="dart" term="dart"/>
        <category label="flutter" term="flutter"/>
        <category label="isolates" term="isolates"/>
        <category label="package" term="package"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>/welcome</id>
        <link href="https://maksimka101.github.io/docusaurus-blog/blog/welcome"/>
        <updated>2022-08-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello there]]></summary>
        <content type="html"><![CDATA[<p>Hello there</p><p>I have created this blog to share my knowledge and thoughts about Dart, Flutter, app architecture and other tech
related topics. If you are interested, come on board!</p>]]></content>
    </entry>
</feed>